/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Vista;

import Conexion.Conexion;
import Controlador.CtrlEntradaSalidas;
import Controlador.CtrlVentas;
import Controlador.ctrl_movimientos;
import Modelo.DetallesVentas;
import Modelo.Deudas;
import Modelo.EntradaSalidas;
import Modelo.Ventas;
import Modelo.movimientosInventario;
import static Vista.FMenu.lbl_totalVenta;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.TimeZone;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Angelica Guerrero
 */
public class EntradasSalidas extends javax.swing.JPanel {

    private String tipoVenta = "";
    DefaultTableModel modeloEntSal = new DefaultTableModel();
    private boolean is_selected = false;
    private int id_entradaSalida;
   
    /**
     * Creates new form PCobrar
     */
    public EntradasSalidas() {
        initComponents();
        Toolkit pantalla=Toolkit.getDefaultToolkit();
        Dimension tamPantalla= pantalla.getScreenSize();
        int alto =tamPantalla.height;
        int ancho = tamPantalla.width;
        setSize(ancho/2,alto/2);
        this.setLayout(new BorderLayout());
        pnl_entradas.setVisible(true);
        this.add(pnl_entradas, BorderLayout.CENTER); // Agregar pnl_cobrar al centro del panel
        tablaEntradasSalidas();
        tbentradasSalidas();
        cargar_tablaEntradasSalidas();
        cmb_tipo.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                filtrarEntradasSalidasPorTipo();
            }
        });
        
    }

    public void tbentradasSalidas() {
        tb_ent.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                int fila_seleccionada = tb_ent.getSelectedRow();
                if (fila_seleccionada > -1) {
                    is_selected = true;
                    int id = (int) tb_ent.getValueAt(fila_seleccionada, 0);
                    this.id_entradaSalida = id;
                    System.out.println("ID seleccionado: " + id);

                }
            }
        });
    }

    private void tablaEntradasSalidas() {
        modeloEntSal = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    };
        modeloEntSal.addColumn("ID");
        modeloEntSal.addColumn("Fecha");
        modeloEntSal.addColumn("Tipo");
        modeloEntSal.addColumn("Cantidad");
        modeloEntSal.addColumn("Descripción");
        modeloEntSal.addColumn("Usuario");
        // Crear una nueva instancia de JTable usando el modelo de datos 'modeloClientes'
        tb_ent = new JTable(modeloEntSal);
        scp_ent.setViewportView(tb_ent);
        tb_ent.getColumnModel().getColumn(0).setMinWidth(0);
        tb_ent.getColumnModel().getColumn(0).setMaxWidth(0);
        tb_ent.getColumnModel().getColumn(0).setWidth(0);
        tb_ent.getColumnModel().getColumn(1).setPreferredWidth(110);
        tb_ent.getColumnModel().getColumn(2).setPreferredWidth(28);

        tb_ent.getColumnModel().getColumn(4).setPreferredWidth(230);
        DefaultTableCellRenderer centrado = new DefaultTableCellRenderer();
        centrado.setHorizontalAlignment(SwingConstants.CENTER);
        for (int i = 0; i < tb_ent.getColumnCount(); i++) {
            tb_ent.getColumnModel().getColumn(i).setCellRenderer(centrado);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnl_entradas = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        rbtn_ent = new javax.swing.JRadioButton();
        rbtn_sal = new javax.swing.JRadioButton();
        jLabel17 = new javax.swing.JLabel();
        sp_cant = new javax.swing.JSpinner();
        jLabel16 = new javax.swing.JLabel();
        text_descripcion = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        btn_guardar = new javax.swing.JButton();
        btn_cancelar = new javax.swing.JButton();
        btn_eliminar = new javax.swing.JButton();
        scp_ent = new javax.swing.JScrollPane();
        tb_ent = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        cmb_tipo = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jDateChooserInicio = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        jDateChooserFinal = new com.toedter.calendar.JDateChooser();
        jButton1 = new javax.swing.JButton();
        jLabel31 = new javax.swing.JLabel();

        pnl_entradas.setBackground(new java.awt.Color(255, 255, 255));

        jLabel14.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel14.setText("Tipo:");

        rbtn_ent.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        rbtn_ent.setText("Entrada");

        rbtn_sal.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        rbtn_sal.setText("Salida");

        jLabel17.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel17.setText("Cantidad:");

        sp_cant.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        sp_cant.setModel(new javax.swing.SpinnerNumberModel(0.0d, 0.0d, 10000.0d, 1.0d));
        sp_cant.setEditor(new javax.swing.JSpinner.NumberEditor(sp_cant, "0.00"));

        jLabel16.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel16.setText("Descripción:");

        text_descripcion.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N

        jPanel3.setBackground(new java.awt.Color(210, 225, 235));

        btn_guardar.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btn_guardar.setText("Guardar");
        btn_guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_guardarActionPerformed(evt);
            }
        });

        btn_cancelar.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btn_cancelar.setText("Regresar");
        btn_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cancelarActionPerformed(evt);
            }
        });

        btn_eliminar.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btn_eliminar.setText("Eliminar");
        btn_eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_eliminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btn_eliminar, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                    .addComponent(btn_guardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_cancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(22, 22, 22))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(btn_guardar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_eliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(btn_cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(284, Short.MAX_VALUE))
        );

        scp_ent.setForeground(new java.awt.Color(255, 255, 255));

        tb_ent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tb_ent.setFocusable(false);
        tb_ent.setGridColor(new java.awt.Color(153, 153, 153));
        tb_ent.setRowHeight(25);
        tb_ent.setSelectionBackground(new java.awt.Color(222, 218, 218));
        tb_ent.setSelectionForeground(new java.awt.Color(255, 255, 255));
        tb_ent.setShowHorizontalLines(true);
        tb_ent.getTableHeader().setReorderingAllowed(false);
        scp_ent.setViewportView(tb_ent);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel2.setText("Mostrar:");

        cmb_tipo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cmb_tipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "- Todos -", "Entrada", "Salida" }));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel3.setText("Desde el:");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel4.setText("Hasta el:");

        jButton1.setText("Mostrar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel31.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel31.setForeground(new java.awt.Color(0, 153, 51));
        jLabel31.setText("Entradas y salidas");

        javax.swing.GroupLayout pnl_entradasLayout = new javax.swing.GroupLayout(pnl_entradas);
        pnl_entradas.setLayout(pnl_entradasLayout);
        pnl_entradasLayout.setHorizontalGroup(
            pnl_entradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_entradasLayout.createSequentialGroup()
                .addGroup(pnl_entradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_entradasLayout.createSequentialGroup()
                        .addGroup(pnl_entradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnl_entradasLayout.createSequentialGroup()
                                .addGap(56, 56, 56)
                                .addGroup(pnl_entradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel16)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnl_entradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(text_descripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(pnl_entradasLayout.createSequentialGroup()
                                        .addGroup(pnl_entradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(cmb_tipo, 0, 159, Short.MAX_VALUE)
                                            .addComponent(jDateChooserInicio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(33, 33, 33)
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jDateChooserFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton1))))
                            .addGroup(pnl_entradasLayout.createSequentialGroup()
                                .addGap(75, 75, 75)
                                .addGroup(pnl_entradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnl_entradasLayout.createSequentialGroup()
                                        .addGroup(pnl_entradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel17)
                                            .addComponent(jLabel14))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(pnl_entradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(pnl_entradasLayout.createSequentialGroup()
                                                .addComponent(rbtn_ent)
                                                .addGap(5, 5, 5)
                                                .addComponent(rbtn_sal))
                                            .addComponent(sp_cant, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(pnl_entradasLayout.createSequentialGroup()
                                        .addGap(32, 32, 32)
                                        .addComponent(jLabel31)))))
                        .addGap(0, 38, Short.MAX_VALUE))
                    .addGroup(pnl_entradasLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(scp_ent)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pnl_entradasLayout.setVerticalGroup(
            pnl_entradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_entradasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel31)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnl_entradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_entradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(rbtn_ent)
                        .addComponent(jLabel14))
                    .addComponent(rbtn_sal))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnl_entradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sp_cant))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnl_entradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(text_descripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnl_entradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmb_tipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(15, 15, 15)
                .addGroup(pnl_entradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addGroup(pnl_entradasLayout.createSequentialGroup()
                        .addGroup(pnl_entradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jDateChooserInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jDateChooserFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(scp_ent, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(pnl_entradasLayout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 835, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 4, Short.MAX_VALUE)
                    .addComponent(pnl_entradas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 5, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 483, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(pnl_entradas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btn_guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_guardarActionPerformed
        // TODO add your handling code here:
        EntradaSalidas entsal=new EntradaSalidas();
        CtrlEntradaSalidas ctrentSal= new CtrlEntradaSalidas();
        if (text_descripcion.getText().equals("")
                || (double) sp_cant.getValue() <= 0) {
            JOptionPane.showMessageDialog(null, "Complete todos los campos", "Información", JOptionPane.INFORMATION_MESSAGE);
        } else if (!text_descripcion.getText().matches("^[a-zA-Z0-9áéíóúÁÉÍÓÚñÑ\\s.,]+$")) {
            JOptionPane.showMessageDialog(null, "La descripción solo puede contener letras, números, espacios, puntos y comas.", "Información", JOptionPane.INFORMATION_MESSAGE);
        }
        else{
            String fechaActual = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new java.util.Date());
           
            String tipo = "";
            if(rbtn_ent.isSelected()){
                tipo = "Entrada";
            }else if(rbtn_sal.isSelected()){
                tipo = "Salida";
            }
            if(rbtn_ent.isSelected() || rbtn_sal.isSelected()){
                entsal.setTipo(tipo);
            }else{
                JOptionPane.showMessageDialog(null, "Seleccione un tipo", "Información", JOptionPane.INFORMATION_MESSAGE);
            }
             entsal.setFecha(fechaActual);
            double cantidad = (double) sp_cant.getValue();
            entsal.setCantidad(cantidad);
            entsal.setDescripcion(text_descripcion.getText());
            entsal.setId_usuario(Login.id_usuario);
            if(ctrentSal.agregar(entsal)){
                JOptionPane.showMessageDialog(null, "Registro guardado", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                this.cargar_tablaEntradasSalidas();
                // Cierra el JDialog que contiene este panel
                ((JDialog) SwingUtilities.getWindowAncestor(this)).dispose();
        
            }
        }
        
    }//GEN-LAST:event_btn_guardarActionPerformed

    private void btn_cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cancelarActionPerformed
        // TODO add your handling code here:
         // Cierra el JDialog que contiene este panel
        ((JDialog) SwingUtilities.getWindowAncestor(this)).dispose();
    }//GEN-LAST:event_btn_cancelarActionPerformed

    private void btn_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_eliminarActionPerformed
        // TODO add your handling code here:
        CtrlEntradaSalidas ctrlcategoria = new CtrlEntradaSalidas();
        if (is_selected) {

            int opcion = JOptionPane.showConfirmDialog(this, "¿Estas seguro de eliminar el registro seleccionado?", "Confirmar", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (opcion == JOptionPane.YES_OPTION) {
                if (ctrlcategoria.eliminar(this.id_entradaSalida)) {
                    JOptionPane.showMessageDialog(null, "Registro eliminado", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                    this.cargar_tablaEntradasSalidas();

                } else {
                    JOptionPane.showMessageDialog(null, "El registro seleccionado no se eliminó correctamente", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione el registro que desea eliminar", "Información", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btn_eliminarActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Date fechaInicio = jDateChooserInicio.getDate();
    Date fechaFin = jDateChooserFinal.getDate();

    if (fechaInicio == null || fechaFin == null) {
        JOptionPane.showMessageDialog(null, "Seleccione ambas fechas", "Advertencia", JOptionPane.WARNING_MESSAGE);
        return;
    }

    if (fechaFin.before(fechaInicio)) {
        JOptionPane.showMessageDialog(null, "La fecha final no puede ser anterior a la inicial", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    // Ajustar fechaFin para incluir todo el día
    Calendar calendarFin = Calendar.getInstance();
    calendarFin.setTime(fechaFin);
    calendarFin.set(Calendar.HOUR_OF_DAY, 23);
    calendarFin.set(Calendar.MINUTE, 59);
    calendarFin.set(Calendar.SECOND, 59);
    calendarFin.set(Calendar.MILLISECOND, 999);
    fechaFin = calendarFin.getTime();

    // Ajustar fechaInicio para incluir el inicio del día
    Calendar calendarInicio = Calendar.getInstance();
    calendarInicio.setTime(fechaInicio);
    calendarInicio.set(Calendar.HOUR_OF_DAY, 0);
    calendarInicio.set(Calendar.MINUTE, 0);
    calendarInicio.set(Calendar.SECOND, 0);
    calendarInicio.set(Calendar.MILLISECOND, 0);
    fechaInicio = calendarInicio.getTime();
    cargar_tablaEntradasSalidasPorFechas(fechaInicio, fechaFin);
    }//GEN-LAST:event_jButton1ActionPerformed

   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_cancelar;
    private javax.swing.JButton btn_eliminar;
    private javax.swing.JButton btn_guardar;
    private javax.swing.JComboBox<String> cmb_tipo;
    private javax.swing.JButton jButton1;
    private com.toedter.calendar.JDateChooser jDateChooserFinal;
    private com.toedter.calendar.JDateChooser jDateChooserInicio;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel pnl_entradas;
    private javax.swing.JRadioButton rbtn_ent;
    private javax.swing.JRadioButton rbtn_sal;
    public static javax.swing.JScrollPane scp_ent;
    private javax.swing.JSpinner sp_cant;
    public static javax.swing.JTable tb_ent;
    private javax.swing.JTextField text_descripcion;
    // End of variables declaration//GEN-END:variables

    public void cargar_tablaEntradasSalidas() {
    Connection cn = Conexion.Conectar();
    String query = "SELECT id_entrada_salida,fecha, tipo, monto, descripcion, usuarios.nombre_usuario FROM entradas_salidas,usuarios WHERE entradas_salidas.id_usuario=usuarios.id_usuario";
    try (PreparedStatement st = cn.prepareStatement(query)) {
        ResultSet rs = st.executeQuery();
        // Elimina filas existentes
        while (modeloEntSal.getRowCount() > 0) {
            modeloEntSal.removeRow(0);
        }
        scp_ent.setViewportView(tb_ent);
        while (rs.next()) {
            Object fila[] = new Object[6];

            // Obtener la fecha como Timestamp
            Timestamp timestamp = rs.getTimestamp("fecha");

            // Establecer la zona horaria local
            TimeZone timeZone = TimeZone.getDefault(); // Usa la zona horaria predeterminada del sistema
            SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
            sdf.setTimeZone(timeZone); // Aplica la zona horaria al formateador

            // Formatear la fecha y hora con la zona horaria local
            String fechaFormateada = sdf.format(timestamp);

            // Asignar la fecha formateada a la primera columna
            fila[0] = rs.getInt("id_entrada_salida");
            fila[1] = fechaFormateada;
            fila[2] = rs.getString("tipo");
            fila[3] = String.format("%.2f", rs.getDouble("monto"));
            fila[4] = rs.getString("descripcion");
            fila[5] = rs.getString("nombre_usuario");

            // Añadir la fila al modelo de la tabla
            modeloEntSal.addRow(fila);
        }
        cn.close();
    } catch (SQLException e) {
        System.out.println("Falló la consulta de Entradas y Salidas" + e);
    }
    is_selected = false;
}
    private void filtrarEntradasSalidasPorTipo() {
    Object selectedItem = cmb_tipo.getSelectedItem();
    String tipoSeleccionado = selectedItem.toString();

    DefaultTableModel modelo = (DefaultTableModel) tb_ent.getModel();
    modelo.setRowCount(0); // Limpia la tabla

    String sql;
    if (tipoSeleccionado.equals("- Todos -")) {
        sql = "SELECT id_entrada_salida, fecha, tipo, monto, descripcion, usuarios.nombre_usuario "
     + "FROM entradas_salidas, usuarios "
     + "WHERE entradas_salidas.id_usuario = usuarios.id_usuario";
    } else {
        sql = "SELECT id_entrada_salida, fecha, tipo, monto, descripcion, usuarios.nombre_usuario "
     + "FROM entradas_salidas, usuarios "
     + "WHERE entradas_salidas.id_usuario = usuarios.id_usuario AND tipo = ?";
    }

    try (Connection cn = Conexion.Conectar(); PreparedStatement pst = cn.prepareStatement(sql)) {
        if (!tipoSeleccionado.equals("- Todos -")) {
            pst.setString(1, tipoSeleccionado);
        }

        ResultSet rs = pst.executeQuery();
        while (rs.next()) {
           // Obtener la fecha como Timestamp
            Timestamp timestamp = rs.getTimestamp("fecha");

            // Establecer la zona horaria local
            TimeZone timeZone = TimeZone.getDefault(); // Usa la zona horaria predeterminada del sistema
            SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
            sdf.setTimeZone(timeZone); // Aplica la zona horaria al formateador

            // Formatear la fecha y hora con la zona horaria local
            String fechaFormateada = sdf.format(timestamp);

            modelo.addRow(new Object[]{
                 rs.getInt("id_entrada_salida"), 
                fechaFormateada,
                rs.getString("tipo"),
                String.format("%.2f", rs.getDouble("monto")),
                rs.getString("descripcion"),
                rs.getString("nombre_usuario")
            });
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al filtrar movimientos.");
    }
}
    public void cargar_tablaEntradasSalidasPorFechas(Date fechaInicio, Date fechaFin) {
    Connection cn = Conexion.Conectar();
    String query = "SELECT id_entrada_salida, fecha, tipo, monto, descripcion, usuarios.nombre_usuario " +
                   "FROM entradas_salidas, usuarios " +
                   "WHERE entradas_salidas.id_usuario = usuarios.id_usuario " +
                   "AND fecha BETWEEN ? AND ?";

    try (PreparedStatement st = cn.prepareStatement(query)) {
        // Convertir fechas de java.util.Date a java.sql.Timestamp
        Timestamp inicioTimestamp = new Timestamp(fechaInicio.getTime());
        Timestamp finTimestamp = new Timestamp(fechaFin.getTime());

        st.setTimestamp(1, inicioTimestamp);
        st.setTimestamp(2, finTimestamp);

        ResultSet rs = st.executeQuery();

        // Elimina filas existentes
        while (modeloEntSal.getRowCount() > 0) {
            modeloEntSal.removeRow(0);
        }

        scp_ent.setViewportView(tb_ent);
        while (rs.next()) {
            Object fila[] = new Object[6];

            Timestamp timestamp = rs.getTimestamp("fecha");

            TimeZone timeZone = TimeZone.getDefault();
            SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
            sdf.setTimeZone(timeZone);

            String fechaFormateada = sdf.format(timestamp);

            fila[0] = rs.getInt("id_entrada_salida");
            fila[1] = fechaFormateada;
            fila[2] = rs.getString("tipo");
            fila[3] = String.format("%.2f", rs.getDouble("monto"));
            fila[4] = rs.getString("descripcion");
            fila[5] = rs.getString("nombre_usuario");

            modeloEntSal.addRow(fila);
        }

        cn.close();
    } catch (SQLException e) {
        System.out.println("Error al consultar Entradas y Salidas por fechas: " + e);
    }
    is_selected = false;
}


}