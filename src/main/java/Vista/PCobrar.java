/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Vista;

import Conexion.Conexion;
import Controlador.CtrlVentas;
import Controlador.ctrl_movimientos;
import Modelo.DetallesVentas;
import Modelo.Deudas;
import Modelo.Ventas;
import Modelo.movimientosInventario;
import static Vista.FMenu.lbl_totalVenta;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.Window;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Angelica Guerrero
 */
public class PCobrar extends javax.swing.JPanel {

    private String tipoVenta = "";
    DefaultTableModel modeloClientes = new DefaultTableModel();
    private boolean is_selected = false;
    private int id_cliente;
    List<Ventas> listaVentas = new ArrayList<>();

    /**
     * Creates new form PCobrar
     */
    public PCobrar() {
        initComponents();
        Toolkit pantalla = Toolkit.getDefaultToolkit();
        Dimension tamPantalla = pantalla.getScreenSize();
        int alto = tamPantalla.height;
        int ancho = tamPantalla.width;
        setSize(ancho / 2, alto / 2);
        this.setLayout(new BorderLayout());
        lbl_totalCobrar.setText("" + FMenu.lbl_totalVenta.getText());
        pnl_fiado.setVisible(false);
        pnl_cobrar.setVisible(true);

        tablaClientes();
        tbClientes();
        this.add(pnl_cobrar, BorderLayout.CENTER); // Agregar pnl_cobrar al centro del panel
        txt_importe.requestFocus();
        tipoVenta = "Contado";
        cargarTablaClientes();

        // Asegurar que txt_importe tenga el foco después de que el panel se haya mostrado
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                // Solicita el foco para el campo de texto txt_importe una vez que todos los componentes hayan sido inicializados y el panel se haya mostrado
                txt_importe.requestFocusInWindow();
            }
        });
    }

    private void tablaClientes() {
        modeloClientes = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        modeloClientes.addColumn("N°");//ID
        modeloClientes.addColumn("Nombre");
        modeloClientes.addColumn("Apellidos");
        modeloClientes.addColumn("Telefono");
        // Crear una nueva instancia de JTable usando el modelo de datos 'modeloClientes'
        tb_cteFiar = new JTable(modeloClientes);
        // Aplicar el diseño de tablas definido en el método 'diseñoTablas' de la clase FMenu
        FMenu fMenuInstance = FMenu.getInstance(); // Asegúrate de tener un método getInstance() en FMenu
        // Aplicar el diseño de tablas definido en el método 'diseñoTablas' de la instancia de FMenu
        tb_cteFiar.getColumnModel().getColumn(0).setMinWidth(0);
        tb_cteFiar.getColumnModel().getColumn(0).setMaxWidth(0);
        tb_cteFiar.getColumnModel().getColumn(0).setWidth(0);
        DefaultTableCellRenderer centrado = new DefaultTableCellRenderer();
        centrado.setHorizontalAlignment(SwingConstants.CENTER);
        for (int i = 0; i < tb_cteFiar.getColumnCount(); i++) {
            tb_cteFiar.getColumnModel().getColumn(i).setCellRenderer(centrado);
        }
        scp_fiar.setViewportView(tb_cteFiar);

        scp_fiar.getViewport().setBackground(new Color(255, 255, 255));
        
    }

    public void tbClientes() {
        tb_cteFiar.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                int fila_seleccionada = tb_cteFiar.getSelectedRow();
                int columna_seleccionada = 0;
                if (fila_seleccionada > -1) {
                    is_selected = true;
                    id_cliente = (int) modeloClientes.getValueAt(fila_seleccionada, columna_seleccionada);

                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnl_cobrar = new javax.swing.JPanel();
        lbl_totalCobrar = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        btn_cobrar = new javax.swing.JButton();
        btn_cancelar = new javax.swing.JButton();
        pnl_contado = new javax.swing.JPanel();
        jLabel29 = new javax.swing.JLabel();
        txt_importe = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        lbl_cambio = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        pnl_fiado = new javax.swing.JPanel();
        txt_buscarCte = new javax.swing.JTextField();
        scp_fiar = new javax.swing.JScrollPane();
        tb_cteFiar = new javax.swing.JTable();
        lbl_fiado = new javax.swing.JLabel();
        lbl_contado = new javax.swing.JLabel();

        pnl_cobrar.setBackground(new java.awt.Color(255, 255, 255));

        lbl_totalCobrar.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        lbl_totalCobrar.setForeground(new java.awt.Color(0, 0, 153));
        lbl_totalCobrar.setText("$0.00");

        jPanel3.setBackground(new java.awt.Color(210, 225, 235));

        btn_cobrar.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btn_cobrar.setText("Cobrar");
        btn_cobrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cobrarActionPerformed(evt);
            }
        });

        btn_cancelar.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btn_cancelar.setText("Regresar");
        btn_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_cancelar)
                    .addComponent(btn_cobrar, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(87, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addComponent(btn_cobrar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(btn_cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(312, Short.MAX_VALUE))
        );

        pnl_contado.setBackground(new java.awt.Color(255, 255, 255));

        jLabel29.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel29.setText("Importe:");

        txt_importe.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txt_importe.setBorder(null);
        txt_importe.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_importeKeyReleased(evt);
            }
        });

        jLabel30.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel30.setText("Cambio:");

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("$");

        lbl_cambio.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lbl_cambio.setPreferredSize(new java.awt.Dimension(55, 25));

        jLabel2.setBackground(new java.awt.Color(0, 0, 0));
        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setText("$");

        javax.swing.GroupLayout pnl_contadoLayout = new javax.swing.GroupLayout(pnl_contado);
        pnl_contado.setLayout(pnl_contadoLayout);
        pnl_contadoLayout.setHorizontalGroup(
            pnl_contadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_contadoLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jLabel29)
                .addGap(3, 3, 3)
                .addComponent(jLabel1)
                .addGap(0, 0, 0)
                .addComponent(txt_importe, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(pnl_contadoLayout.createSequentialGroup()
                .addGap(110, 110, 110)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(pnl_contadoLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(pnl_contadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_contadoLayout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel30))
                .addGap(5, 5, 5)
                .addComponent(jLabel2)
                .addGap(0, 0, 0)
                .addComponent(lbl_cambio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pnl_contadoLayout.setVerticalGroup(
            pnl_contadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_contadoLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(pnl_contadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_contadoLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel29))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_importe, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(pnl_contadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_contadoLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(pnl_contadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnl_contadoLayout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel30)))
                    .addComponent(jLabel2)
                    .addComponent(lbl_cambio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pnl_fiado.setBackground(new java.awt.Color(255, 255, 255));

        txt_buscarCte.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txt_buscarCte.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_buscarCteKeyReleased(evt);
            }
        });

        scp_fiar.setForeground(new java.awt.Color(255, 255, 255));

        tb_cteFiar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tb_cteFiar.setFocusable(false);
        tb_cteFiar.setGridColor(new java.awt.Color(153, 153, 153));
        tb_cteFiar.setRowHeight(25);
        tb_cteFiar.setSelectionBackground(new java.awt.Color(222, 218, 218));
        tb_cteFiar.setSelectionForeground(new java.awt.Color(255, 255, 255));
        tb_cteFiar.setShowHorizontalLines(true);
        tb_cteFiar.getTableHeader().setReorderingAllowed(false);
        scp_fiar.setViewportView(tb_cteFiar);

        javax.swing.GroupLayout pnl_fiadoLayout = new javax.swing.GroupLayout(pnl_fiado);
        pnl_fiado.setLayout(pnl_fiadoLayout);
        pnl_fiadoLayout.setHorizontalGroup(
            pnl_fiadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_fiadoLayout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addGroup(pnl_fiadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txt_buscarCte)
                    .addComponent(scp_fiar))
                .addContainerGap())
        );
        pnl_fiadoLayout.setVerticalGroup(
            pnl_fiadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_fiadoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txt_buscarCte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scp_fiar, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        lbl_fiado.setBackground(new java.awt.Color(204, 204, 204));
        lbl_fiado.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        lbl_fiado.setText("Fiado");
        lbl_fiado.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        lbl_fiado.setOpaque(true);
        lbl_fiado.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                lbl_fiadoMouseMoved(evt);
            }
        });
        lbl_fiado.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl_fiadoMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lbl_fiadoMouseExited(evt);
            }
        });

        lbl_contado.setBackground(new java.awt.Color(204, 204, 204));
        lbl_contado.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        lbl_contado.setText("Contado");
        lbl_contado.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        lbl_contado.setOpaque(true);
        lbl_contado.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                lbl_contadoMouseMoved(evt);
            }
        });
        lbl_contado.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl_contadoMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lbl_contadoMouseExited(evt);
            }
        });

        javax.swing.GroupLayout pnl_cobrarLayout = new javax.swing.GroupLayout(pnl_cobrar);
        pnl_cobrar.setLayout(pnl_cobrarLayout);
        pnl_cobrarLayout.setHorizontalGroup(
            pnl_cobrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_cobrarLayout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(pnl_cobrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_cobrarLayout.createSequentialGroup()
                        .addGap(130, 130, 130)
                        .addComponent(lbl_contado, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                        .addGap(40, 40, 40)
                        .addComponent(lbl_fiado, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 217, Short.MAX_VALUE))
                    .addGroup(pnl_cobrarLayout.createSequentialGroup()
                        .addGroup(pnl_cobrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pnl_fiado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnl_cobrarLayout.createSequentialGroup()
                                .addGap(83, 83, 83)
                                .addComponent(pnl_contado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnl_cobrarLayout.createSequentialGroup()
                                .addGap(160, 160, 160)
                                .addComponent(lbl_totalCobrar, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(42, 42, 42)))
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pnl_cobrarLayout.setVerticalGroup(
            pnl_cobrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_cobrarLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(lbl_totalCobrar, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addGroup(pnl_cobrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_contado, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_fiado, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(pnl_cobrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnl_fiado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnl_cobrarLayout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(pnl_contado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 820, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(pnl_cobrar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 470, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(pnl_cobrar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private boolean contadoClicked = false;
    private boolean fiadoClicked = false;
    private void lbl_contadoMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl_contadoMouseMoved
        // TODO add your handling code here:
        lbl_contado.setBackground(new Color(234, 234, 230));
    }//GEN-LAST:event_lbl_contadoMouseMoved
    //cuando ya no se le da click
    private void lbl_contadoMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl_contadoMouseExited
        // TODO add your handling code here:
        if (!contadoClicked) {
            lbl_contado.setBackground(new Color(204, 204, 204)); // Restablecer el color original
        }
    }//GEN-LAST:event_lbl_contadoMouseExited

    private void btn_cobrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cobrarActionPerformed
        // TODO add your handling code here:
        cobrarVenta();
        FMenu fMenu = FMenu.getInstance(); // Asegúrate de que estás obteniendo la instancia correcta de FMenu
        int idClienteEstado = fMenu.getIdClienteEstado();
        FMenu.getInstance().cargar_tablaProductos();
        FMenu.getInstance().cargar_tablaMovimientos();
        FMenu.getInstance().cargar_tablaProductosBajoInv();
        FMenu.getInstance().cargar_tablaProductosInventario();
        FMenu.getInstance().cargarTablaEstadoCuentaFiado(idClienteEstado);
        FMenu.getInstance().mostrarResumenDeudaCliente(idClienteEstado);
        FMenu.getInstance().cargarHistorialDeudas();
        FMenu.getInstance().totalExistencias();
        FMenu.getInstance().totalSaldoInventario();
        VentasDevoluciones.getInstance().cargar_tablaDetalleVentasHoy();
        int idDetalle = VentasDevoluciones.getInstance().getIdDetalle();
        VentasDevoluciones.getInstance().cargarTablaVentasPorDetalle(idDetalle);
    }//GEN-LAST:event_btn_cobrarActionPerformed

    private void lbl_fiadoMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl_fiadoMouseMoved
        // TODO add your handling code here:
        lbl_fiado.setBackground(new Color(234, 234, 230));
    }//GEN-LAST:event_lbl_fiadoMouseMoved

    private void lbl_fiadoMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl_fiadoMouseExited
        // TODO add your handling code here:
        if (!fiadoClicked) {
            lbl_fiado.setBackground(new Color(204, 204, 204)); // Restablecer el color original
        }
    }//GEN-LAST:event_lbl_fiadoMouseExited

    private void lbl_fiadoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl_fiadoMouseClicked
        // TODO add your handling code here:
        pnl_fiado.setVisible(true);
        pnl_contado.setVisible(false);
        fiadoClicked = true;
        lbl_fiado.setBackground(new Color(234, 234, 230));
        lbl_contado.setBackground(new Color(204, 204, 204)); // Restablecer el color original
        tipoVenta = "Fiado";
    }//GEN-LAST:event_lbl_fiadoMouseClicked

    private void lbl_contadoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl_contadoMouseClicked
        // TODO add your handling code here:
        pnl_fiado.setVisible(false);
        pnl_contado.setVisible(true);
        contadoClicked = true;
        lbl_contado.setBackground(new Color(234, 234, 230));
        lbl_fiado.setBackground(new Color(204, 204, 204)); // Restablecer el color original
        txt_importe.requestFocus();
        tipoVenta = "Contado";
    }//GEN-LAST:event_lbl_contadoMouseClicked

    private void txt_importeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_importeKeyReleased
        // TODO add your handling code here:
        txt_importe.requestFocus();
        cambio();
    }//GEN-LAST:event_txt_importeKeyReleased

    private void txt_buscarCteKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_buscarCteKeyReleased
        // TODO add your handling code here:
        // Obtener el texto del campo de texto "txt_buscarCliente" después de quitar los espacios en blanco al inicio y al final
        String buscarCliente = txt_buscarCte.getText().trim();
        // Llamar al método "buscarCliente" para buscar los clientes que coincidan con el texto "buscarCliente"
        FMenu fMenuInstance = FMenu.getInstance(); // Asegúrate de tener un método getInstance() en FMenu
        // Aplicar el diseño de tablas definido en el método 'diseñoTablas' de la instancia de FMenu

        DefaultTableModel model = fMenuInstance.buscarCliente(buscarCliente);
        // Actualizar la tabla "tb_adcliente" con el nuevo modelo de datos
        tb_cteFiar.setModel(model);
        // Llamar al método "diseñoTbClientes" para configurar el diseño de la tabla "tb_adcliente"

    }//GEN-LAST:event_txt_buscarCteKeyReleased

    private void btn_cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cancelarActionPerformed
        // TODO add your handling code here:
        ((JDialog) SwingUtilities.getWindowAncestor(this)).dispose();

    }//GEN-LAST:event_btn_cancelarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_cancelar;
    private javax.swing.JButton btn_cobrar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lbl_cambio;
    private javax.swing.JLabel lbl_contado;
    private javax.swing.JLabel lbl_fiado;
    private javax.swing.JLabel lbl_totalCobrar;
    private javax.swing.JPanel pnl_cobrar;
    private javax.swing.JPanel pnl_contado;
    private javax.swing.JPanel pnl_fiado;
    public static javax.swing.JScrollPane scp_fiar;
    public static javax.swing.JTable tb_cteFiar;
    private javax.swing.JTextField txt_buscarCte;
    public static javax.swing.JTextField txt_importe;
    // End of variables declaration//GEN-END:variables
    private void cambio() {
        // TODO add your handling code here:
        if (!txt_importe.getText().isEmpty()) {

            double cuenta = Double.parseDouble(txt_importe.getText().trim());
            // Obtener el texto de total a cobrar y eliminar cualquier símbolo no numérico
            double totpag = Double.parseDouble(lbl_totalCobrar.getText().trim().replaceAll("[^\\d.]", ""));
            double cobrar = (cuenta - totpag);
            double cobrar2 = (double) Math.round(cobrar * 100) / 100;
            String cobrarT = String.valueOf(cobrar2);
            lbl_cambio.setText(cobrarT);

        } else {
            lbl_cambio.setText("0.00");
        }
    }

    public void cobrarVenta() {
    DetallesVentas detalles = new DetallesVentas();
    Deudas deudas = new Deudas();
    CtrlVentas ctVentas = new CtrlVentas();

    String fechaActual = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new java.util.Date());

    if (FMenu.listaProducto.size() > 0) {
        if (tipoVenta.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Seleccione una opción de pago (Contado o Fiado)", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (tipoVenta.equals("Fiado") && id_cliente <= 0) {
            JOptionPane.showMessageDialog(null, "Debe seleccionar un cliente para registrar una deuda.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int usuario = Login.id_usuario;
        double totalVenta = Double.parseDouble(lbl_totalVenta.getText().replaceAll("[^\\d.]", ""));

        double importeIngresado = 0;
        if (tipoVenta.equals("Contado")) {
            try {
                importeIngresado = Double.parseDouble(txt_importe.getText().trim());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Ingrese un importe válido.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (importeIngresado < totalVenta) {
                JOptionPane.showMessageDialog(null, "El importe ingresado no puede ser menor al total de la venta.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }

        detalles.setId_detalleVenta(0);
        detalles.setId_usuario(usuario);
        detalles.setFechaVenta(fechaActual);
        detalles.setImporteTotal(totalVenta);
        detalles.setTipoVenta(tipoVenta);

        boolean ventaRegistrada = ctVentas.agregarDetalleVenta(detalles, FMenu.listaProducto);

        if (ventaRegistrada) {
            int idDetalleVenta = CtrlVentas.idDatosRegistrados;

            for (Ventas venta : FMenu.listaProducto) {
                double stockAnterior = obtenerStockActual(venta.getId_producto());
                double cantidadVendida = venta.getCantidad();
                double stockNuevo = stockAnterior - cantidadVendida;

                this.restarStockProductos(venta.getId_producto(), cantidadVendida);

                movimientosInventario movimiento = new movimientosInventario();
                movimiento.setFechaMovimiento(fechaActual);
                movimiento.setTipoMovimiento("SALIDA");
                movimiento.setCantidad(cantidadVendida);
                movimiento.setCantidadAnt(stockAnterior);
                movimiento.setCantidadActual(stockNuevo);
                movimiento.setIdProducto(venta.getId_producto());
                movimiento.setIdUsuario(Login.id_usuario);

                ctrl_movimientos ctrlMov = new ctrl_movimientos();
                ctrlMov.agregarMovimientoInventario(movimiento);
            }

            if (tipoVenta.equals("Fiado")) {
                deudas.setId_deuda(0);
                deudas.setId_cliente(id_cliente);
                deudas.setId_detalleVenta(idDetalleVenta);
                deudas.setFecha(fechaActual);
                deudas.setMonto(totalVenta);

                if (ctVentas.agregarDeudaYActualizarDetalle(deudas, idDetalleVenta)) {
                    JOptionPane.showMessageDialog(null, "Deuda registrada", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                    FMenu.getInstance().cargarHistorialDeudas();
                } else {
                    JOptionPane.showMessageDialog(null, "Error al registrar la deuda", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Transacción registrada", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            }

            FMenu.getInstance().limpiarVenta();
            FMenu.listaProducto.clear();
            ((JDialog) SwingUtilities.getWindowAncestor(this)).dispose();
        } else {
            JOptionPane.showMessageDialog(null, "Error al registrar la venta", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        JOptionPane.showMessageDialog(null, "Agregue un producto", "Advertencia", JOptionPane.WARNING_MESSAGE);
        ((JDialog) SwingUtilities.getWindowAncestor(this)).dispose();
    }
}



    private void restarStockProductos(int idProducto, double cantidad) {
        double cantidadProductosBD = 0.0;
        //obtener los datos del producto para hacer la resta
        try {
            Connection cn = Conexion.Conectar();
            String sql = "SELECT id_producto,existencias_producto FROM productos WHERE id_producto= '" + idProducto + "'";
            Statement st;
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                cantidadProductosBD = rs.getInt("existencias_producto");
            }
            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al restar cantidad" + e);
        }
        try {
            // Establecer conexión a la base de datos usando la clase de conexión 'Conexion'
            Connection cn = Conexion.Conectar();
            // Preparar la sentencia SQL para actualizar el campo 'existencias_producto' en la tabla 'productos'
            PreparedStatement consulta = cn.prepareStatement("UPDATE productos SET existencias_producto=? WHERE id_producto='" + idProducto + "'");
            // Calcular el nuevo stock restando la cantidad vendida (cantidad) del stock actual (cantidadProductosBD)
            double stockNuevo = cantidadProductosBD - cantidad;
            // Asignar el nuevo valor de existencias_producto al parámetro de la consulta preparada
            consulta.setDouble(1, stockNuevo);
            // Ejecutar la consulta de actualización y verificar si se actualizó al menos una fila en la base de datos
            if (consulta.executeUpdate() > 0) {
            }
            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al restar cantidad " + e);
        }
    }

    private double obtenerStockActual(int idProducto) {
        double stock = 0;
        try (Connection cn = Conexion.Conectar(); PreparedStatement pst = cn.prepareStatement("SELECT existencias_producto FROM productos WHERE id_producto = ?")) {
            pst.setInt(1, idProducto);
            ResultSet rs = pst.executeQuery();
            if (rs.next()) {
                stock = rs.getDouble("existencias_producto");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return stock;
    }

    public void cargarTablaClientes() {
        Connection cn = Conexion.Conectar();
        String query = "SELECT * FROM clientes";
        try (PreparedStatement st = cn.prepareStatement(query)) {
            ResultSet rs = st.executeQuery();
            while (modeloClientes.getRowCount() > 0) {
                modeloClientes.removeRow(0);
            }
            scp_fiar.setViewportView(tb_cteFiar);
            while (rs.next()) {
                Object fila[] = new Object[4];
                for (byte i = 0; i < 4; i++) {
                    fila[i] = rs.getObject(i + 1);
                }
                modeloClientes.addRow(fila);
            }
            cn.close();
        } catch (SQLException e) {
            System.out.println("Fallo la consulta de cllientes: " + e);
        }
        is_selected = false;
    }

}
