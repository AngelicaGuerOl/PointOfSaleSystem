/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Vista;

import Conexion.Conexion;
import Controlador.CtrlVentas;
import Controlador.ctrl_movimientos;
import Modelo.movimientosInventario;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

/**
 *
 * @author olver
 */
public class Devolver extends javax.swing.JPanel {

    private int idDetalleVenta;
    private int idProducto;
    private VentasDevoluciones panelPadre;

    public Devolver(int idDetalleVenta, int idProducto, VentasDevoluciones panelPadre) {
        initComponents();  // Aquí cargas los componentes gráficos
        this.idDetalleVenta = idDetalleVenta;
        this.idProducto = idProducto;
        this.panelPadre = panelPadre;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnRegistrarDevolucion = new javax.swing.JButton();
        sp_cant = new javax.swing.JSpinner();

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel1.setText("¿Cantidad a devolver?");

        btnRegistrarDevolucion.setBackground(new java.awt.Color(204, 204, 204));
        btnRegistrarDevolucion.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnRegistrarDevolucion.setText("Registrar");
        btnRegistrarDevolucion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarDevolucionActionPerformed(evt);
            }
        });

        sp_cant.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        sp_cant.setModel(new javax.swing.SpinnerNumberModel(0.0d, 0.0d, 10000.0d, 1.0d));
        sp_cant.setEditor(new javax.swing.JSpinner.NumberEditor(sp_cant, "0.00"));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(98, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(147, 147, 147))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(135, 135, 135)
                        .addComponent(btnRegistrarDevolucion))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(125, 125, 125)
                        .addComponent(sp_cant, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sp_cant)
                .addGap(22, 22, 22)
                .addComponent(btnRegistrarDevolucion)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnRegistrarDevolucionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarDevolucionActionPerformed
        // TODO add your handling code here:
        double cantidadDevuelta = (double) sp_cant.getValue();
         // Obtener cantidad actual de la venta para validar
        double cantidadVendida = obtenerCantidadVendida(idDetalleVenta, idProducto);
        if (cantidadDevuelta > cantidadVendida) {
            JOptionPane.showMessageDialog(null, "La cantidad a devolver no puede ser mayor a la cantidad vendida (" + cantidadVendida + ")", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        CtrlVentas ctventas = new CtrlVentas();
        boolean exito = ctventas.registrarDevolucionYActualizarVentas(idDetalleVenta, idProducto, cantidadDevuelta);
        if (exito) {
            JOptionPane.showMessageDialog(null, "Devolución registrada", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            double stockAnterior = obtenerStockActual(idProducto);
            double stockNuevo = stockAnterior + cantidadDevuelta;
            movimientosInventario movimiento = new movimientosInventario();
            movimiento.setFechaMovimiento(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new java.util.Date()));
            movimiento.setTipoMovimiento("DEVOLUCION");
            movimiento.setCantidad(cantidadDevuelta);
            movimiento.setCantidadAnt(stockAnterior);
            movimiento.setCantidadActual(stockNuevo);
            movimiento.setIdProducto(idProducto);
            movimiento.setIdUsuario(Login.id_usuario); // Asegúrate que Login.id_usuario esté accesible

            ctrl_movimientos ctrlMov = new ctrl_movimientos();
            ctrlMov.agregarMovimientoInventario(movimiento);

            // También actualizar el stock del producto
            sumarStockProductos(idProducto, cantidadDevuelta);  // Este método debería ser similar a restarStockProductos

            panelPadre.cargarTablaVentasPorDetalle(idDetalleVenta);
            panelPadre.cargar_tablaDetalleVentasHoy();
            FMenu fMenu = FMenu.getInstance(); // Asegúrate de que estás obteniendo la instancia correcta de FMenu
            FMenu.getInstance().cargar_tablaProductos();
            FMenu.getInstance().cargar_tablaMovimientos();
            FMenu.getInstance().cargar_tablaProductosBajoInv();
            FMenu.getInstance().cargar_tablaProductosInventario();
            FMenu.getInstance().cargarHistorialDeudas();
            int idClienteEstado = fMenu.getIdClienteEstado();   
            FMenu.getInstance().cargarTablaEstadoCuentaFiado(idClienteEstado);
            FMenu.getInstance().mostrarResumenDeudaCliente(idClienteEstado);
            FMenu.getInstance().totalExistencias();
            FMenu.getInstance().totalSaldoInventario();
                // Cierra el JDialog que contiene este panel
            ((JDialog) SwingUtilities.getWindowAncestor(this)).dispose();

        } else {
            JOptionPane.showMessageDialog(null, "Error al registrar la devolución", "Error", JOptionPane.ERROR_MESSAGE);

        }


    }//GEN-LAST:event_btnRegistrarDevolucionActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRegistrarDevolucion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSpinner sp_cant;
    // End of variables declaration//GEN-END:variables
    public void establecerValorSpinner(double valor) {
        sp_cant.setValue(valor);  // Establece el valor que desees al spinner
    }

    public void seleccionarTextoSpinner() {
        JComponent editor = sp_cant.getEditor();
        JFormattedTextField spinnerTextField = ((JSpinner.DefaultEditor) editor).getTextField();

        // Usamos invokeLater para que se ejecute después de que el dialog se muestre
        SwingUtilities.invokeLater(() -> {
            spinnerTextField.requestFocus();
            spinnerTextField.selectAll();
        });
    }
    public void sumarStockProductos(int idProducto, double cantidad) {
    Connection cn = Conexion.Conectar();
    String query = "UPDATE productos SET existencias_producto = existencias_producto + ? WHERE id_producto = ?";

    try (PreparedStatement ps = cn.prepareStatement(query)) {
        ps.setDouble(1, cantidad);
        ps.setInt(2, idProducto);
        ps.executeUpdate();
    } catch (SQLException e) {
        System.out.println("Error al sumar stock: " + e);
    }
}
    public double obtenerStockActual(int idProducto) {
    double stock = 0;
    Connection cn = Conexion.Conectar();
    String query = "SELECT existencias_producto FROM productos WHERE id_producto = ?";

    try (PreparedStatement ps = cn.prepareStatement(query)) {
        ps.setInt(1, idProducto);
        ResultSet rs = ps.executeQuery();

        if (rs.next()) {
            stock = rs.getDouble("existencias_producto");
        }
    } catch (SQLException e) {
        System.out.println("Error al obtener stock actual: " + e);
    }

    return stock;
}
    public double obtenerCantidadVendida(int idDetalleVenta, int idProducto) {
    double cantidad = 0;
    Connection cn = Conexion.Conectar();
    String query = "SELECT cantidad FROM ventas WHERE id_detalleVenta = ? AND id_producto = ?";

    try (PreparedStatement st = cn.prepareStatement(query)) {
        st.setInt(1, idDetalleVenta);
        st.setInt(2, idProducto);
        ResultSet rs = st.executeQuery();

        if (rs.next()) {
            cantidad = rs.getDouble("cantidad");
        }

        cn.close();
    } catch (SQLException e) {
        System.out.println("Error al obtener cantidad vendida: " + e);
    }

    return cantidad;
}




}
